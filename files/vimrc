syntax enable
if filereadable(expand("~/.vim/bundle/Vundle.vim/README.md"))
    "" START VUNDLE
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    " Additional Plugins
    Plugin 'vim-airline/vim-airline'
    Plugin 'rust-lang/rust.vim'
    Plugin 'cmcaine/vim-uci'

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    "" END VUNDLE
endif

set number

" Tab length control
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Auto reload
set autoread
colorscheme darkblue

highlight Comment ctermfg=green

" Ignore case on search - if using lowercase
set ignorecase
set smartcase

" Set tags to be first tags file on way back to ~
set tags=./tags;,tags;


fun! GitCommand(command, window)
 "   silent! !clear
    let tmpfile = tempname()
    exec "!git " . a:command . " % > " . tmpfile
    exec a:window . " " . tmpfile
"    exec "!rm " . tmpfile
endfun

fun! CHeader(command)
    let file = expand('%:r') . ".h"
    if filereadable(file)
        exec a:command . " " . file
    else
        echom "Couldn't find header file"
    endif
endfun

fun! CSource(command)
    let file = expand('%:r') . ".c"
    if filereadable(file)
        exec a:command . " " . file
    elseif filereadable(file . "pp")
        exec a:command . " " . file . "pp"
    else
        echom "Couldn't find C file"
    endif
endfun

" Git status bar
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

function! GetCommentCharacter()
    let comment = ""
    if &filetype ==# "cpp" || &filetype ==# "c" || &filetype ==# "javascript"
        let comment="//"
    elseif &filetype ==# "vim"
        let comment='"'
    elseif &filetype ==# "sh" || &filetype ==# "python" || &filetype ==# "sshconfig" || &filetype ==# "yaml"
        let comment='#'
    else
        echom "Unrecognised filtype : " . &filetype
    endif
    return comment
endfunction

function! Comment()
    let comment = GetCommentCharacter()
    if comment != ""
        exec ":norm ^i" . comment
    endif
endfunction

function! UnComment()
    let comment = GetCommentCharacter()
    if comment != ""
        exec ":norm ^" . strlen(comment) . "x"
    endif
endfunction

set laststatus=2
set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#

" Easy shortcuts
:let mapleader=","
map <leader>b :silent :call GitCommand("blame", ":vsp") <CR>
map <leader>n :silent :call GitCommand("blame", ":e") <CR>
map <leader>reu oReuse-Change-Id: <ESC>
map <leader>h :call CHeader(":e") <CR>
map <leader>c :call CSource(":e") <CR>
map <leader>vsph :call CHeader(":vsp") <cr>
map <leader>vspc :call CSource(":vsp") <cr>
map <leader>sph :call CHeader(":sp") <cr>
map <leader>spc :call CSource(":sp") <cr>
map <leader>light :colorscheme default<cr>
map <leader>dark :colorscheme darkblue<cr>
" Conflict finder
map <leader>x /^<<<<<<<<cr>
" Commenter
map <leader>\ :call Comment()<cr>
map <leader>` :call UnComment()<cr>

" Replace line with buffer
map <leader>rr :normal pkddyy<cr>

" Show tabs when "set list" is used
set nolist
set listchars=tab:>.

" Show trailing whitespace as error
match Error /\s\+$/

" Auto strip / delete white space from files
"autocmd BufWritePre * %s/\s\+$//e

" folding - open folds with zo close with zc
" zr reduces fold depth
" zm increases fold depth
set foldmethod=syntax
" auto open fold
set foldlevel=99

